#!/bin/sh
################################################################################
### BATOCERA.PLUS
### Alexandre Freire dos Santos
### alexxandre.freire@gmail.com
################################################################################

SHARE='/userdata'

################################################################################

### CAPTURA DE PARAMETROS.

P1INDEX=''; P1GUID=''; P1NAME=''  ; P1NBAXES=''; P1DEVICEPATH=''
P2INDEX=''; P2GUID=''; P2NAME=''  ; P2NBAXES=''; P2DEVICEPATH=''
P3INDEX=''; P3GUID=''; P3NAME=''  ; P3NBAXES=''; P3DEVICEPATH=''
P4INDEX=''; P4GUID=''; P4NAME=''  ; P4NBAXES=''; P4DEVICEPATH=''
P5INDEX=''; P5GUID=''; P5NAME=''  ; P5NBAXES=''; P5DEVICEPATH=''
SYSTEM='' ; ROM=''   ; EMULATOR=''; CORE=''    ; RATIO=''
NETPLAY=''

FOUND=''

for i in "$@"; do
    if [ "$FOUND" == '' ]; then
        case "$i" in
            -p1index|-p1guid|-p1name  |-p1nbaxes|-p1devicepath| \
            -p2index|-p2guid|-p2name  |-p2nbaxes|-p2devicepath| \
            -p3index|-p3guid|-p3name  |-p3nbaxes|-p3devicepath| \
            -p4index|-p4guid|-p4name  |-p4nbaxes|-p4devicepath| \
            -p5index|-p5guid|-p5name  |-p5nbaxes|-p5devicepath| \
            -system |-rom   |-emulator|-core    |-ratio       | \
            -netplay)
                FOUND="$i"
	        ;;
	esac
    else
        case "$FOUND" in
	    -p1index)      P1INDEX="$i"      ;;
	    -p1guid)       P1GUID="$i"       ;;
	    -p1name)       P1NAME="$i"       ;;
	    -p1nbaxes)     P1NBAXES="$i"     ;;
	    -p1devicepath) P1DEVICEPATH="$i" ;;
	    -p2index)      P2INDEX="$i"      ;;
	    -p2guid)       P2GUID="$i"       ;;
	    -p2name)       P2NAME="$i"       ;;
	    -p2nbaxes)     P2NBAXES="$i"     ;;
	    -p2devicepath) P2DEVICEPATH="$i" ;;
	    -p3index)      P3INDEX="$i"      ;;
	    -p3guid)       P3GUID="$i"       ;;
	    -p3name)       P3NAME="$i"       ;;
	    -p3nbaxes)     P3NBAXES="$i"     ;;
	    -p3devicepath) P3DEVICEPATH="$i" ;;
	    -p4index)      P4INDEX="$i"      ;;
	    -p4guid)       P4GUID="$i"       ;;
	    -p4name)       P4NAME="$i"       ;;
	    -p4nbaxes)     P4NBAXES="$i"     ;;
	    -p4devicepath) P4DEVICEPATH="$i" ;;
	    -p5index)      P5INDEX="$i"      ;;
	    -p5guid)       P5GUID="$i"       ;;
	    -p5name)       P5NAME="$i"       ;;
	    -p5nbaxes)     P5NBAXES="$i"     ;;
	    -p5devicepath) P5DEVICEPATH="$i" ;;
	    -system)       SYSTEM="$i"       ;;
	    -rom)          ROM="$i"          ;;
	    -emulator)     EMULATOR="$i"     ;;
	    -core)         CORE="$i"         ;;
	    -ratio)        RATIO="$i"        ;;
	    -netplay)      NETPLAY="$i"      ;;
        esac

        FOUND=''
    fi
done

################################################################################

### LOAD SCREEN START

# Define o nome do tema.
if [ -f "$SHARE/system/configs/emulationstation/es_settings.cfg" ]; then
    THEME_NAME="$(cat "$SHARE/system/configs/emulationstation/es_settings.cfg" | grep '<string name="ThemeSet" value=' | cut -d '"' -f 4)"
    if ! [ "$THEME_NAME" ]; then
        THEME_NAME='batocera-plus'
    fi
else
    THEME_NAME='batocera-plus'
fi

# Define Diretorio do tema.
if [ -d "$SHARE/themes/$THEME_NAME" ]; then
    THEME_DIR="$SHARE/themes/$THEME_NAME"
elif [ -d "/etc/emulationstation/themes/$THEME_NAME" ]; then
    THEME_DIR="/etc/emulationstation/themes/$THEME_NAME"
else
    THEME_DIR="/etc/emulationstation/themes/batocera-plus"
fi

# Define o nome da imagem de carregamento.
if [ -f "$THEME_DIR/loadscreen/$SYSTEM.png" ]; then
    IMG_NAME="$THEME_DIR/loadscreen/$SYSTEM.png"
elif [ -f "$THEME_DIR/loadscreen/$SYSTEM.jpg" ]; then
    IMG_NAME="$THEME_DIR/loadscreen/$SYSTEM.jpg"
elif [ -f '/etc/emulationstation/themes/batocera-plus/loadscreen/loadscreen.png' ]; then
    IMG_NAME='/etc/emulationstation/themes/batocera-plus/loadscreen/loadscreen.png'
elif [ -f '/etc/emulationstation/themes/batocera-plus/loadscreen/loadscreen.jpg' ]; then
    IMG_NAME='/etc/emulationstation/themes/batocera-plus/loadscreen/loadscreen.jpg'
fi

# Exibe a tela de carregamento.
retroarch -L '/usr/lib/libretro/imageviewer_libretro.so' \
          --config '/usr/share/batocera/datainit/system/configs/retroarch/retroarchcustom.cfg' \
          "$IMG_NAME" &

START_TIME="$(date +%s)"

################################################################################

### CONFIGURA A ROM PARA SER EXECUTADA POR ARQUIVO DE TEXTO.
### Útil para usar as roms de um sistema em outro sem duplicar arquivos.

if [ "$(ls -l "$ROM" | awk '{print $5}')" -lt 33 ]; then
    ROM_TXT="$(head -n 1 "$ROM")"
    if [ "$(echo "$ROM_TXT" | grep '^#')" ]; then
        ROM_NAME="$(basename "$ROM")"
        ROM_DIR="$(dirname "$ROM")"
        ROM_SYS="$(echo "$ROM_TXT" | grep '^#' | cut -d '#' -f 2-)"
        ROM_NEW="$(dirname "$ROM_DIR")"
        ROM="$ROM_NEW/$ROM_SYS/$ROM_NAME"
    fi
fi

################################################################################

### DESCOMPACTA ROM NO FORMATO DO 7ZIP

function un7zip() {

    ### Diretório para descompactar as roms.
    EXTRAC_DIR="$SHARE/extractions"

    ### Pega o nome da rom sem a extenção.
    ### Somente executa o script para arquivos compactados pelo 7zip.
    ROM_DIR="$(dirname  "$ROM")"
    if [ -e "$ROM_DIR/$(basename "$ROM" 7z)7z" ]; then
        ROM_FILE="$(basename "$ROM" .7z)"
    elif [ -e "$ROMDIR/$(basename "$ROM" 7Z)7Z" ]; then
        ROM_FILE="$(basename "$ROM" .7Z)"
    else
        return 0
    fi

    ### Procura por arquivo principal da rom (.cue .ccd .lst etc...)
    ### no diretório de roms descompactadas.
    for ((i = 0; i != 2; i++)); do
        for j in $1; do
            if [ -d "$EXTRAC_DIR/$ROM_FILE" ]; then
                if [ -f "$EXTRAC_DIR/$ROM_FILE/$ROM_FILE$j" ]; then
                    ROM="$EXTRAC_DIR/$ROM_FILE/$ROM_FILE$j"
                    return 0
                fi
            elif [ -f "$EXTRAC_DIR/$ROM_FILE$j" ]; then
                ROM="$EXTRAC_DIR/$ROM_FILE$j"
                return 0
            fi
        done

        ### Evita que a ISO seja descompactada duas vezes.
        ### Isso acontece quando a rom está com um formato não aceito.
        if (( $i > 0 )); then
            return 1
        fi

        ### Limpa a pasta temporária de descompactação.
        if [ "$(ls $EXTRAC_DIR)" ]; then
            rm -r "$EXTRAC_DIR/"*
        fi

        ### Descompacta a rom.
        7zr x "$ROM" "-o$EXTRAC_DIR" -bb0
    done
}

case $SYSTEM in
    3do)        un7zip '.cue .CUE .iso .ISO .chd .CHD' ;;
    psx)        un7zip '.ccd .CCD .cue .CUE .mdf .MDF .chd .CHD .cbn .CBN .m3u .M3U .pbp .PBP .toc .TOC .z .Z .znx .ZNX .img .IMG .iso .ISO' ;;
    psp)        un7zip '.iso .ISO .cso .CSO .pbp .PBP .elf .ELF .prx .PRX' ;;
    pspminis)   un7zip '.iso .ISO .cso .CSO .pbp .PBP .elf .ELF .prx .PRX' ;;
    ps2)        un7zip '.mdf .MDF .iso .ISO .nrg .NRG .bin .BIN .img .IMG .dump .DUMP .cso .CSO .gz .GZ' ;;
    gamecube)   un7zip '.ciso .CISO .iso .ISO .gc .GC .gcz .GCZ .gcm .GCM' ;;
    wii)        un7zip '.iso .ISO .wbfs .WBFS .elf .ELF .dol .DOL .gcm .GCM .ciso .CISO .gcz .GCZ .wad .WAD' ;;
    3ds)        un7zip '.3ds .3DS .3dsx .3DSX .elf .ELF .axf .AXF .cci .CCI .cxi .CXI .app .APP' ;;
    segacd)     un7zip '.cue .CUE .chd .CHD .iso .ISO' ;;
    saturn)     un7zip '.ccd .CCD .cue .CUE .chd .CHD .zip .ZIP .iso .ISO .bin .BIN' ;;
    dreamcast)  un7zip '.cdi .CDI .gdi .GDI .chd .CHD' ;;
    naomi)      un7zip '.lst .LST .bin .BIN .dat .DAT' ;;
    neogeocd)   un7zip '.cue .CUE .iso .ISO' ;;
    atomiswave) un7zip '.lst .LST .bin .BIN .dat .DAT .zip .ZIP' ;;
    naomi)      un7zip '.lst .LST .bin .BIN .dat .DAT .zip .ZIP' ;;
    arcade)     un7zip '.lst .LST .bin .BIN .dat .DAT .zip .ZIP' ;;
    snescd)     un7zip '.smc .SMC .sfc .SFC' ;;
    n64)        un7zip '.z64 .Z64 .n64 .N64 .v64 .V64 .zip .ZIP' ;;
esac

################################################################################

### EXECUTA A ROM DENTRO DE UMA PASTA

function runInFolder {

    # Ignora sistemas que utilizam roms dentro de pastas nativamente como por
    # exemplo  msdos windows e linux 
    case "$SYSTEM" in
        pc|dos|windows|linux|pcgames) return 0 ;;
    esac

    # Verifica se o nome do arquivo principal da rom (.cue .iso) tem o mesmo
    # nome e extensão da pasta com a rom, se tiver configura para executar a
    # rom sem tentar adivinhar a sua extensão.
    ROM_NAME="$(basename "$ROM")"
    if [ -f "$ROM/$ROM_NAME" ]; then
        ROM="$ROM/$ROM_NAME"
        return 0
    fi

    # Tenta adivinhar a extensão do arquivo principal da rom.
    ROM_EXTENSION='.ccd .CCD .cue .CUE .lst .LST .toc .TOC .sfc .SFC .smc .SMC .chd .CHD .ciso .CISO .cso .CSO .wbfs .WBFS .cdi .CDI .gc .GC .pbp .PBP .dump .DUMP .gcm .GCM .wad .WAD .gcz .GCZ .gdi .GDI .2hd .2HD .32x .32X .3ds .3DS .3dsx .3DSX .88d .88D .a26 .A26 .a52 .A52 .a78 .A78 .adf .ADF .adz .ADZ .app .APP .atr .ATR .atx .ATX .axf .AXF .bs .BS .cas .CAS .cbn .CBN .cci .CCI .cdm .CDM .cdt .CDT .cmd .CMD .col .COL .cpc .CPC .crt .CRT .ctr .CTR .cxi .CXI .d64 .D64 .d71 .D71 .d80 .D80 .d81 .D81 .d82 .D82 .d88 .D88 .dim .DIM .dms .DMS .do .DO .dol .DOL .dsk .DSK .dup .DUP .elf .ELF .exe .EXE .fba .FBA .fds .FDS .fig .FIG .g41 .G41 .g64 .G64 .gam .GAM .gb .GB .gba .GBA .gbc .GBC .gen .GEN .gg .GG .hdf .HDF .hdm .HDM .int .INT .ipf .IPF .itv .ITV .iwad .IWAD .j64 .J64 .jag .JAG .lha .LHA .lnx .LNX .lua .LUA .lutro .LUTRO .m3u .M3U .md .MD .mgd .MGD .mgt .MGT .mgw .MGW .moonlight .MOONLIGHT .mx1 .MX1 .mx2 .MX2 .n64 .N64 .nds .NDS .nes .NES .ngc .NGC .ngp .NGP .nib .NIB .p .P .p00 .P00 .pak .PAK .pce .PCE .po .PO .prg .PRG .prx .PRX .raw .RAW .residualvm .RESIDUALVM .rom .ROM .rzx .RZX .scl .SCL .scummvm .SCUMMVM .sg .SG .sgx .SGX .smd .SMD .sms .SMS .sna .SNA .st .ST .stx .STX .svm .SVM .swc .SWC .swf .SWF .szx .SZX .t64 .T64 .tap .TAP .trd .TRD .tzx .TZX .uae .UAE .udi .UDI .v64 .V64 .vb .VB .vec .VEC .ws .WS .wsc .WSC .x64 .X64 .xdf .XDF .xex .XEX .xfd .XFD .z .Z .z64 .Z64 .z80 .Z80 .znx .ZNX .nrg .NRG .mdf .MDF .iso .ISO .dat .DAT .bin .BIN .img .IMG .zip .ZIP .gz .GZ .7z .7Z'
    for i in $ROM_EXTENSION; do
        if [ -f "$ROM/${ROM_NAME%.*}$i" ]; then
            ROM="$ROM/${ROM_NAME%.*}$i"
            return 0
        fi
    done
    return 1
}

# Somente executa esta função se a rom estiver dentro de uma pasta.
if [ -d "$ROM" ]; then
    runInFolder
fi

################################################################################

### CONVERTE NOMES DE SISTEMAS PARA CLONES.

case $SYSTEM in
    fba_libretro)   SYSTEM='fba'        ;;
    famicom)        SYSTEM='nes'        ;;
    nesmini)        SYSTEM='nes'        ;;
    sfc)            SYSTEM='snes'       ;;
    snesmini)       SYSTEM='snes'       ;;
    snescd)         SYSTEM='snes'       ;;
    n64dd)          SYSTEM='n64'        ;;
    genesis)        SYSTEM='megadrive'  ;;
    pspminis)       SYSTEM='psp'        ;;
    psxmini)        SYSTEM='psx'        ;;
    turbografx16)   SYSTEM='pcengine'   ;;
    turbografx16cd) SYSTEM='pcenginecd' ;;
    neogeomini)     SYSTEM='neogeo'     ;;
    neogeox)        SYSTEM='neogeo'     ;;
esac

################################################################################

### LOAD SCREEN STOP

if [ "$START_TIME" == "$(date +%s)" ]; then
    sleep 3
fi

while [ "$(pidof retroarch)" ]; do
    killall retroarch &
    sleep 0.2
done

################################################################################

### RAINE (EMULADOR DE NEOGEO CD)

if [ "$SYSTEM" == 'neogeocd' ]; then

    if [ -f "$HOME/batocera.conf" ]; then
        NGCD_EMULATOR="$(cat $HOME/batocera.conf | grep neogeocd.emulator | cut -d '=' -f 2)"

        if [ "$NGCD_EMULATOR" != 'libretro' ]; then
            NGCD_CORE="$(cat $HOME/batocera.conf | grep neogeocd.core | cut -d '=' -f 2)"

            exec /opt/Raine/Raine.sh "$ROM" "$CORE" "$EMULATOR" \
            $(test -z "$P1INDEX" || echo -n "$P1INDEX") \
            $(test -z "$P1GUID"  || echo -n "$P1GUID")  \
            $(test -z "$P2INDEX" || echo -n "$P2INDEX") \
            $(test -z "$P2GUID"  || echo -n "$P2GUID")
        fi
    fi

    #libretro
    #raine-cdz
    #raine-top-load
    #raine-front-load
    #raine-unibios
    #auto
    #neogeocd.emulator=raine-top-load
    #neogeocd.core=raine2015

    #if [ "$EMULATOR" != 'libretro' ]; then
    #    exec /opt/Raine/Raine.sh "$ROM" "$CORE" "$EMULATOR" \
    #    $(test -z "$P1INDEX" || echo -n "$P1INDEX") \
    #    $(test -z "$P1GUID"  || echo -n "$P1GUID")  \
    #    $(test -z "$P2INDEX" || echo -n "$P2INDEX") \
    #    $(test -z "$P2GUID"  || echo -n "$P2GUID")
    #fi
fi

################################################################################

### ARCADE

# IMPORTANTE!!!!!
# Os pack estão desativados no batocera 5.22
# Vou manter este trexo de código na esperança que eles voltem
# se isso nao acontecer pode remover este código.

if [ "$SYSTEM" == 'arcade' ]; then
    case $CORE in
        mame)               SYSTEM='mame'  ;;
        mame0200)           SYSTEM='mame'  ;;
        mame0174)           SYSTEM='mame'  ;;
        mame0139)           SYSTEM='mame'  ;;
        mame078)            SYSTEM='mame'  ;;
        mame078plus)        SYSTEM='mame'  ;;
        fba)                SYSTEM='fba'   ;;
        fbalpha2012)        SYSTEM='fba'   ;;
        fbalpha2012_cps1)   SYSTEM='fba'   ;;
        fbalpha2012_cps2)   SYSTEM='fba'   ;;
        fbalpha2012_neogeo) SYSTEM='fba'   ;;
        reicast)            SYSTEM='naomi' ;;
        *)                  SYSTEM='mame'  ;;
    esac
fi


################################################################################

### PSP

# Resolve o bug do jogo não carregar quando o controle de PS4 estiver conectado
# por adaptador sem fio oficial da sony.
#if [ "$SYSTEM" == 'psp' ]; then
#    if [ "$P1GUID" == '030000004c050000a00b000011810000' ]; then
#        # Usa o mesmo id do controle conectado por cabo.
#        P1GUID='030000004c050000cc09000011810000'
#    fi
#fi


################################################################################

### NINTENDO 3DS

# Centraliza a tela no citra.

#if [ "$SYSTEM" == '3ds' ]; then
#    if ! [ -f "$HOME/configs/citraemu/sdl2-config.ini" ]; then
#        mkdir -p "$HOME/configs/citraemu"
#        echo '[Layout]'                   >  "$HOME/configs/citraemu/sdl2-config.ini"
#        echo 'custom_layout = 1'          >> "$HOME/configs/citraemu/sdl2-config.ini"
#        echo 'custom_top_left = 100'      >> "$HOME/configs/citraemu/sdl2-config.ini"
#        echo 'custom_top_top = 10'        >> "$HOME/configs/citraemu/sdl2-config.ini"
#        echo 'custom_top_right = 540'     >> "$HOME/configs/citraemu/sdl2-config.ini"
#        echo 'custom_top_bottom = 300'    >> "$HOME/configs/citraemu/sdl2-config.ini"
#        echo 'custom_bottom_left = 190'   >> "$HOME/configs/citraemu/sdl2-config.ini"
#        echo 'custom_bottom_top = 300'    >> "$HOME/configs/citraemu/sdl2-config.ini"
#        echo 'custom_bottom_right = 450'  >> "$HOME/configs/citraemu/sdl2-config.ini"
#        echo 'custom_bottom_bottom = 470' >> "$HOME/configs/citraemu/sdl2-config.ini"
#    fi
#fi

################################################################################

### NINTENDO 64 (altamente experimental)

# Descompacta a rom no formato .zip para o emulador mupen64plus.
# Este emulador só executa roms descompactadas.
# Seria interssante transformar este código em uma função para servir para outros sistemas.

if [ "$SYSTEM" == 'n64' ] && [ "$EMULATOR" == 'mupen64plus' ] || [ "$EMULATOR" == 'auto' ]; then
    ROM_NAME="$(basename "$ROM")"
    if [ "${ROM%.zip}.zip" == "$ROM" ] || [ "${ROM%.ZIP}.ZIP" == "$ROM" ]; then
        if [ "$(ls)" ]; then
            rm -r -f "$HOME/extractions/"*
        fi
        unzip "$ROM" -d "$HOME/extractions"
    fi
    for j in .z64 .Z64 .n64 .N64 .v64 .V64; do
        if [ -f "$HOME/extractions/${ROM_NAME%.zip}$j" ]; then
            ROM="$HOME/extractions/${ROM_NAME%.zip}$j"
            break
        fi
    done
fi

################################################################################

### OPENBOR

if [ "$SYSTEM" == 'openbor' ]; then
    exec /opt/OpenBOR/OpenBOR.sh "$ROM"
fi

################################################################################

### LINUX

if [ "$SYSTEM" == 'linux' ]; then

    # Carrega o jogo de uma pasta.
    if [ -d "$ROM" ]; then
        exec "$ROM/batocera.plus" $@;
    fi

    # Carrega o jogo compactado no formato squashfs.
    if [ -f "${ROM%plus}plus" ] || [ -f "${ROM%PLUS}PLUS" ]; then
        if mount "$ROM" $HOME/../extractions; then
            $HOME/../extractions/batocera.plus $@;
            umount -f "$HOME/../extractions"
        fi
    fi

    exit $?
fi

################################################################################

### GAMECUBE

if [ "$SYSTEM" == 'gamecube' ]; then
    mouse-pointer on
fi

################################################################################

### NINTENDO WII

if [ "$SYSTEM" == 'wii' ]; then
    mouse-pointer on
fi

################################################################################

### WINDOWS

if [ "$SYSTEM" == 'windows' ]; then

    ### Captura o nome da rom sem extenção ###

    ROM_NAME="$(basename "$ROM")"

    if [ "$ROM_NAME" == "${ROM_NAME%plus}plus" ]; then
        ROM_NAME="${ROM_NAME%.plus}"
    elif [ "$ROM_NAME" == "${ROM_NAME%PLUS}PLUS" ]; then
        ROM_NAME="${ROM_NAME%.PLUS}"
    else
        exit 1
    fi

    ### Monta e acessa o diretório do jogo ###

    if [ -d "$ROM" ]; then
        cd "$ROM"
    elif [ -f "$ROM" ]; then
        # Monta a imagem compactada no formato squashfs.
        if mount "$ROM" "$HOME/../extractions"; then
            cd "$HOME/../extractions"
            ROM="$HOME/../extractions"
        else
            exit $?
        fi
    else
        exit 1
    fi

    ### Configura o save ###

    WINDOWS_SAVE="$(cat batocera.plus | grep '^SAVE=' | cut -d "'" -f 2)"

    if ! [ -z "$WINDOWS_SAVE" ]; then

        ### Cria o diretório de save (batocera e wine) ###

        BATOCERA_SAVE="$HOME/../saves/windows/${ROM_NAME}"

        if ! [ -d "${BATOCERA_SAVE}" ]; then
            mkdir -p "${BATOCERA_SAVE}"
        fi

        if ! [ -e "${WINDOWS_SAVE}" ]; then
            mkdir -p "${WINDOWS_SAVE}/.."
            rm -r  "${WINDOWS_SAVE}"
            ln -sf "${BATOCERA_SAVE}" "${WINDOWS_SAVE}"
        fi
    fi

    ### Executa o jogo ###

    if [ "$ROM" == "$HOME/../extractions" ]; then
        ./batocera.plus $@
        cd ..
        umount -f "$HOME/../extractions"
        exit 0
    else
        exec ./batocera.plus $@
    fi
fi

################################################################################

### INTERNET

if [ "$SYSTEM" == 'internet' ]; then
    mouse-pointer on
    exec /opt/Firefox/firefox.sh "$SYSTEM" "$ROM"
fi

################################################################################

### FLASH

if [ "$SYSTEM" == 'flash' ]; then
    mouse-pointer on
    exec /opt/Firefox/firefox.sh "$SYSTEM" "$ROM"
fi

################################################################################

### APLICATIVOS

# Em andamento....

################################################################################

### EXECUTA A ROM

EXEC_EMU="$(
    echo -n 'exec python /usr/lib/python2.7/site-packages/configgen/emulatorlauncher.pyc'

    test -z "$P1INDEX"      || echo -n ' -p1index '      "$P1INDEX"
    test -z "$P1GUID"       || echo -n ' -p1guid '       "$P1GUID"
    test -z "$P1NAME"       || echo -n ' -p1name '     "\"$P1NAME\""
    test -z "$P1NBAXES"     || echo -n ' -p1nbaxes '     "$P1NBAXES"
    test -z "$P1DEVICEPATH" || echo -n ' -p1devicepath ' "$P1DEVICEPATH"

    test -z "$P2INDEX"      || echo -n ' -p2index '      "$P2INDEX"
    test -z "$P2GUID"       || echo -n ' -p2guid '       "$P2GUID"
    test -z "$P2NAME"       || echo -n ' -p2name '     "\"$P2NAME\""
    test -z "$P2NBAXES"     || echo -n ' -p2nbaxes '     "$P2NBAXES"
    test -z "$P2DEVICEPATH" || echo -n ' -p2devicepath ' "$P2DEVICEPATH"

    test -z "$P3INDEX"      || echo -n ' -p3index '      "$P3INDEX"
    test -z "$P3GUID"       || echo -n ' -p3guid '       "$P3GUID"
    test -z "$P3NAME"       || echo -n ' -p3name '     "\"$P3NAME\""
    test -z "$P3NBAXES"     || echo -n ' -p3nbaxes '     "$P3NBAXES"
    test -z "$P3DEVICEPATH" || echo -n ' -p3devicepath ' "$P3DEVICEPATH"

    test -z "$P4INDEX"      || echo -n ' -p4index '      "$P4INDEX"
    test -z "$P4GUID"       || echo -n ' -p4guid '       "$P4GUID"
    test -z "$P4NAME"       || echo -n ' -p4name '     "\"$P4NAME\""
    test -z "$P4NBAXES"     || echo -n ' -p4nbaxes '     "$P4NBAXES"
    test -z "$P4DEVICEPATH" || echo -n ' -p4devicepath ' "$P4DEVICEPATH"

    test -z "$P5INDEX"      || echo -n ' -p5index '      "$P5INDEX"
    test -z "$P5GUID"       || echo -n ' -p5guid '       "$P5GUID"
    test -z "$P5NAME"       || echo -n ' -p5name '     "\"$P5NAME\""
    test -z "$P5NBAXES"     || echo -n ' -p5nbaxes '     "$P5NBAXES"
    test -z "$P5DEVICEPATH" || echo -n ' -p5devicepath ' "$P5DEVICEPATH"

    # IMPORTANT
    # Algumas opcoes foram desativadas devido ao novo emulationstation ter menos funcionalidades que o antigo.
    # Se as funcionalidades nao voltarem removar estas opcoes.
    #test -z "$NETPLAY"      || echo -n ' -netplay '      "$NETPLAY"
    test -z "$SYSTEM"       || echo -n ' -system '       "$SYSTEM"
    test -z "$ROM"          || echo -n ' -rom '        "\"$ROM\""
    #test -z "$EMULATOR"     || echo -n ' -emulator '     "$EMULATOR"
    #test -z "$CORE"         || echo -n ' -core '         "$CORE"
    #test -z "$RATIO"        || echo -n ' -ratio '        "$RATIO"
)"

echo "$EXEC_EMU" > "$HOME/logs/es_launch_plus.log"
exec /bin/sh -c "$EXEC_EMU"

################################################################################
